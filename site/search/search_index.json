{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Getting Started ?","text":""},{"location":"index.html#fisherexact","title":"FisherExact","text":"<p>Fisher exact test for mxn contingency table</p>"},{"location":"index.html#installation","title":"Installation","text":"<p>FisherExact should be python2/3 compatible. You can install it with pip : <code>pip install FisherExact</code></p> <p>If you get an error about builtins module, install \"future\" with <code>pip install future</code></p> <p>This package use fortran sources, so you need to have a fortran compiler (<code>gfortran</code>) installed. See here ==&gt; https://gcc.gnu.org/wiki/GFortranBinaries.</p> <p>The source code was tested on Linux and Mac (thanks to @fomightez)</p>"},{"location":"index.html#binary-usage","title":"Binary Usage","text":"<p>A binary is provided to use FisherExact from the terminal</p> <pre><code>usage: fexact [-h] [--simulate [SIMULATE]] [--hybrid] [--midP]\n              [--retry ATTEMPT] [--workspace WORKSPACE] [--version]\n              table\n\nFisher's Exact test for mxn contingency table\n\npositional arguments:\n  table                 Contingency table in a file, without header\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --simulate [SIMULATE]\n                        Simulate p-values with n replicates\n  --hybrid              Use hybrid mode\n  --midP                Use midP correction\n  --retry ATTEMPT       Number of attempt to made if execution fail\n  --workspace WORKSPACE\n                        Workspace size to use, Increase this if the program\n                        crash\n  --version             show program's version number and exit\n</code></pre>"},{"location":"index.html#contingency-table-format-if-fexact-is-used-as-binary","title":"Contingency table format if fexact is used as binary","text":"<p>The accepted format is space/tab or comma (or both) separated values with an optionnal first line starting with a \"#\" that specified the number of rows and column:</p> <p>For example, the following format are accepted</p> <pre><code># 2 3\n8        2       12\n1        5       2\n</code></pre> <pre><code>8 2 12\n1 5 2\n</code></pre> <pre><code>#2, 3\n8   2   12\n1   5   2\n</code></pre> <pre><code>8,2,12\n1,5,2\n</code></pre>"},{"location":"index.html#use-as-a-module","title":"Use as a module","text":"<pre><code>fisher_exact(table, alternative='two-sided', hybrid=False, midP=False, simulate_pval=False, replicate=2000, workspace=300, attempt=2, seed=None)\n    Performs a Fisher exact test on a mxn contingency table.\n\n    Parameters\n    ----------\n    table : array_like of ints\n        A 2x2 contingency table.  Elements should be non-negative integers.\n    alternative : {'two-sided', 'less', 'greater'}, optional\n        Which alternative hypothesis to the null hypothesis the test uses.\n        Default is 'two-sided'.  Only used in the 2 x 2 case (with the scipy function).\n        In every other case, the two-sided pval is returned.\n    mult : int \n        Specify the size of the workspace used in the network algorithm.  \n        Only used for non-simulated p-values larger than 2 x 2 table. \n        You might want to increase this if the p-value failed\n    hybrid : bool\n        Only used for larger than 2 x 2 tables, in which cases it indicates\n        whether the exact probabilities (default) or a hybrid approximation \n        thereof should be computed.\n    midP : bool\n        Use this to enable mid-P correction. Could lead to slow computation.\n        This is not applicable for simulation p-values. `alternative` cannot \n        be used if you enable midpoint correction.\n    simulate_pval : bool \n        Indicate whether to compute p-values by Monte Carlo simulation,\n         in larger than 2 x 2 tables.\n    replicate : int\n        An integer specifying the number of replicates used in the Monte Carlo test.\n    workspace : int\n        An integer specifying the workspace size. Default value is 300. \n    attempt : int\n        Number of attempts to try, if the workspace size is not enough. \n        On each attempt, the workspace size is doubled. \n    seed : int\n        Random number to use as seed. If a seed isn't provided. 4 bytes will be read \n        from os.urandom. If this fail, getrandbits of the random module \n        (with 32 random bits) will be used. In the particular case where both failed,\n        the current time will be used\n\n    Returns\n    -------\n    p_value : float\n        The probability of a more extreme table, where 'extreme' is in a \n        probabilistic sense.\n</code></pre>"},{"location":"index.html#if-you-need-to-cite","title":"If you need to cite.","text":"<pre><code>@article{maclandrol,\ntitle={Fisher\\'s exact test for MxN contingency table}, \nDOI={10.5281/zenodo.2587757},\npublisher={Zenodo}, \nauthor={Emmanuel Noutahi}, \nyear={2018}\n}\n</code></pre>"},{"location":"api.html","title":"FisherExact","text":""},{"location":"api.html#FisherExact.Fisher.__iwork","title":"<code>__iwork(allocated, number, itype='int')</code>","text":"<p>Check if the allocated memory is enough</p> Source code in <code>FisherExact/Fisher.py</code> <pre><code>def __iwork(allocated, number, itype=\"int\"):\n    \"\"\"Check if the allocated memory is enough\"\"\"\n    if itype == \"double\":\n        allocated += number &lt;&lt; 1\n    else:\n        allocated += number\n\n    return allocated\n</code></pre>"},{"location":"api.html#FisherExact.Fisher.fisher_exact","title":"<code>fisher_exact(table, alternative='two-sided', hybrid=False, midP=False, simulate_pval=False, replicate=2000, workspace=300, attempt=3, seed=None)</code>","text":"<p>Performs a Fisher exact test on a mxn contingency table.</p> <p>Note</p> <p>The calculated odds ratio is different from the one R uses. The scipy implementation returns the (more common) \"unconditional Maximum Likelihood Estimate\", while R uses the \"conditional Maximum Likelihood Estimate\". For tables with large numbers, the (inexact) chi-square test implemented in the function <code>chi2_contingency</code> can also be used.</p> <p>Example</p> <p>Say we spend a few days counting whales and sharks in the Atlantic and Indian oceans. In the Atlantic ocean we find 8 whales and 1 shark, in the Indian ocean 2 whales, 5 sharks and in the Pacific 12 whales and 2 sharks. Then our contingency table is::             Atlantic  Indian    Pacific     whales     8        2       12     sharks     1        5       2 We use this table to find the p-value:</p> <pre><code>from Fisher import fisher_exact\npvalue = fisher_exact([[8, 2, 12], [1, 5, 2]])\npvalue # 0.01183...\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>table</code> <p>array_like of ints A mxn contingency table.  Elements should be non-negative integers.</p> required <code>alternative</code> <p>{'two-sided', 'less', 'greater'}, optional Which alternative hypothesis to the null hypothesis the test uses. Default is 'two-sided'.  Only used in the 2 x 2 case (with the scipy function). In every other case, the two-sided pval is returned.</p> <code>'two-sided'</code> <code>hybrid</code> <p>bool Only used for larger than 2 x 2 tables, in which cases it indicates whether the exact probabilities (default) or a hybrid approximation thereof should be computed.</p> <code>False</code> <code>workspace</code> <p>int Specify the size of the workspace used in the network algorithm. Only used for non-simulated p-values larger than 2 x 2 table. You might want to increase this if execution failed!</p> <code>300</code> <code>midP</code> <p>bool Use this to enable mid-P correction. Could lead to slow computation. This is not applicable for simulation p-values. <code>alternative</code> cannot be used if you enable midpoint correction.</p> <code>False</code> <code>simulate_pval</code> <p>bool Indicate whether to compute p-values by Monte Carlo simulation, in larger than 2 x 2 tables.</p> <code>False</code> <code>replicate</code> <p>int An integer specifying the number of replicates used in the MonteCarlo test.</p> <code>2000</code> <code>workspace</code> <p>int An integer specifying the workspace size. Default value is 300.</p> <code>300</code> <code>attempt</code> <p>int Number of attempts to try, if the workspace size is not enough. On each attempt, the workspace size is doubled. Default value is 3</p> <code>3</code> <code>seed</code> <p>int Random number to use as seed. If a seed isn't provided random.systemrandom will be used, if this failed the current time will be used.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>p_value</code> <p>float The probability of a more extreme table, where 'extreme' is in a probabilistic sense.</p> Source code in <code>FisherExact/Fisher.py</code> <pre><code>def fisher_exact(\n    table,\n    alternative=\"two-sided\",\n    hybrid=False,\n    midP=False,\n    simulate_pval=False,\n    replicate=2000,\n    workspace=300,\n    attempt=3,\n    seed=None,\n):\n    \"\"\"Performs a Fisher exact test on a mxn contingency table.\n\n\n\n    !!! note\n        The calculated odds ratio is different from the one R uses. The scipy\n        implementation returns the (more common) \"unconditional Maximum\n        Likelihood Estimate\", while R uses the \"conditional Maximum Likelihood\n        Estimate\".\n        For tables with large numbers, the (inexact) chi-square test implemented\n        in the function `chi2_contingency` can also be used.\n\n    !!! example\n        Say we spend a few days counting whales and sharks in the Atlantic and\n        Indian oceans. In the Atlantic ocean we find 8 whales and 1 shark, in the\n        Indian ocean 2 whales, 5 sharks and in the Pacific 12 whales and 2 sharks.\n        Then our contingency table is::\n                    Atlantic  Indian    Pacific\n            whales     8        2       12\n            sharks     1        5       2\n        We use this table to find the p-value:\n\n        ```python\n        from Fisher import fisher_exact\n        pvalue = fisher_exact([[8, 2, 12], [1, 5, 2]])\n        pvalue # 0.01183...\n        ```\n\n    Args:\n        table : array_like of ints\n            A mxn contingency table.  Elements should be non-negative integers.\n        alternative : {'two-sided', 'less', 'greater'}, optional\n            Which alternative hypothesis to the null hypothesis the test uses.\n            Default is 'two-sided'.  Only used in the 2 x 2 case (with the scipy\n            function). In every other case, the two-sided pval is returned.\n        hybrid : bool\n            Only used for larger than 2 x 2 tables, in which cases it indicates\n            whether the exact probabilities (default) or a hybrid approximation\n            thereof should be computed.\n        workspace : int\n            Specify the size of the workspace used in the network algorithm.\n            Only used for non-simulated p-values larger than 2 x 2 table.\n            You might want to increase this if execution failed!\n        midP : bool\n            Use this to enable mid-P correction. Could lead to slow computation.\n            This is not applicable for simulation p-values. `alternative` cannot\n            be used if you enable midpoint correction.\n        simulate_pval : bool\n            Indicate whether to compute p-values by Monte Carlo simulation,\n            in larger than 2 x 2 tables.\n        replicate : int\n            An integer specifying the number of replicates used in the MonteCarlo\n            test.\n        workspace : int\n            An integer specifying the workspace size. Default value is 300.\n        attempt : int\n            Number of attempts to try, if the workspace size is not enough.\n            On each attempt, the workspace size is doubled. Default value is 3\n        seed : int\n            Random number to use as seed. If a seed isn't provided random.systemrandom\n            will be used, if this failed the current time will be used.\n\n    Returns:\n        p_value : float\n            The probability of a more extreme table, where 'extreme' is in a\n            probabilistic sense.\n    \"\"\"\n\n    workspace = 2 * int(workspace / 2)\n    # int32 is not enough for the algorithm\n    c = np.asarray(table, dtype=np.int64)\n\n    if len(c.shape) &gt; 2:\n        raise ValueError(\"The input `table` should not have more than 2 dimension.\")\n\n    if np.any(np.asarray(c.shape) &lt; 2):\n        raise ValueError(\"The input `table` must be at least of shape (2, 2).\")\n\n    # We expect all values to be non-negative\n    if np.any(c &lt; 0):\n        raise ValueError(\"All values in `table` must be nonnegative.\")\n\n    nr, nc = c.shape\n\n    if nr == 2 and nc == 2:\n        # I'm not sure what the fisher_exact module of ss do.\n        # So use my own implementation of fisher exact if midp is asked\n        if not midP:\n            # in this case, just use the default scipy\n            # could remove this in the future\n            return ss.fisher_exact(c, alternative)[1]\n        else:\n            return _midp(c)\n\n    else:\n        pval = None\n        if simulate_pval:\n            sr = c.sum(axis=1)\n            sc = c.sum(axis=0)\n            # The zero colums and rows are droped here, see R function\n            c = c[sr &gt; 0, :][:, sc &gt; 0]\n            nr, nc = c.shape\n            if nr &lt; 2 or nc &lt; 2:\n                raise ValueError(\"Less than 2 non-zero column or row marginal,\\n %s\" % c)\n\n            statistic = -np.sum(lgamma(c + 1))\n            tmp_res = _fisher_sim(c, replicate, seed, workspace)\n            almost = 1 + 64 * np.finfo(np.double).eps\n            # prevent value of 0, this is actually the best estimator\n            # alternatively, we could fit a distribution and compute pval\n            if np.sum(tmp_res &lt;= statistic) &lt; 1:\n                logger.warning(\n                    \"All simulated values are lower than table statistic : pval technically of 0.\"\n                )\n            pval = (1 + np.sum(tmp_res &lt;= statistic / almost)) / (replicate + 1.0)\n        elif hybrid:\n            expect, percnt, emin = 5, 80, 1  # this is the cochran condition\n            pval = _execute_fexact(nr, nc, c, nr, expect, percnt, emin, workspace, attempt, midP)\n        else:\n            expect, percnt, emin = -1, 100, 0\n            pval = _execute_fexact(nr, nc, c, nr, expect, percnt, emin, workspace, attempt, midP)\n\n        return pval\n</code></pre>"},{"location":"license.html","title":"License","text":"<pre><code>GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. &lt;http://fsf.org/&gt;\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\n  This version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.\n\n  0. Additional Definitions.\n\n  As used herein, \"this License\" refers to version 3 of the GNU Lesser\nGeneral Public License, and the \"GNU GPL\" refers to version 3 of the GNU\nGeneral Public License.\n\n  \"The Library\" refers to a covered work governed by this License,\nother than an Application or a Combined Work as defined below.\n\n  An \"Application\" is any work that makes use of an interface provided\nby the Library, but which is not otherwise based on the Library.\nDefining a subclass of a class defined by the Library is deemed a mode\nof using an interface provided by the Library.\n\n  A \"Combined Work\" is a work produced by combining or linking an\nApplication with the Library.  The particular version of the Library\nwith which the Combined Work was made is also called the \"Linked\nVersion\".\n\n  The \"Minimal Corresponding Source\" for a Combined Work means the\nCorresponding Source for the Combined Work, excluding any source code\nfor portions of the Combined Work that, considered in isolation, are\nbased on the Application, and not on the Linked Version.\n\n  The \"Corresponding Application Code\" for a Combined Work means the\nobject code and/or source code for the Application, including any data\nand utility programs needed for reproducing the Combined Work from the\nApplication, but excluding the System Libraries of the Combined Work.\n\n  1. Exception to Section 3 of the GNU GPL.\n\n  You may convey a covered work under sections 3 and 4 of this License\nwithout being bound by section 3 of the GNU GPL.\n\n  2. Conveying Modified Versions.\n\n  If you modify a copy of the Library, and, in your modifications, a\nfacility refers to a function or data to be supplied by an Application\nthat uses the facility (other than as an argument passed when the\nfacility is invoked), then you may convey a copy of the modified\nversion:\n\n   a) under this License, provided that you make a good faith effort to\n   ensure that, in the event an Application does not supply the\n   function or data, the facility still operates, and performs\n   whatever part of its purpose remains meaningful, or\n\n   b) under the GNU GPL, with none of the additional permissions of\n   this License applicable to that copy.\n\n  3. Object Code Incorporating Material from Library Header Files.\n\n  The object code form of an Application may incorporate material from\na header file that is part of the Library.  You may convey such object\ncode under terms of your choice, provided that, if the incorporated\nmaterial is not limited to numerical parameters, data structure\nlayouts and accessors, or small macros, inline functions and templates\n(ten or fewer lines in length), you do both of the following:\n\n   a) Give prominent notice with each copy of the object code that the\n   Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the object code with a copy of the GNU GPL and this license\n   document.\n\n  4. Combined Works.\n\n  You may convey a Combined Work under terms of your choice that,\ntaken together, effectively do not restrict modification of the\nportions of the Library contained in the Combined Work and reverse\nengineering for debugging such modifications, if you also do each of\nthe following:\n\n   a) Give prominent notice with each copy of the Combined Work that\n   the Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the Combined Work with a copy of the GNU GPL and this license\n   document.\n\n   c) For a Combined Work that displays copyright notices during\n   execution, include the copyright notice for the Library among\n   these notices, as well as a reference directing the user to the\n   copies of the GNU GPL and this license document.\n\n   d) Do one of the following:\n\n       0) Convey the Minimal Corresponding Source under the terms of this\n       License, and the Corresponding Application Code in a form\n       suitable for, and under terms that permit, the user to\n       recombine or relink the Application with a modified version of\n       the Linked Version to produce a modified Combined Work, in the\n       manner specified by section 6 of the GNU GPL for conveying\n       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n       Version.\n\n   e) Provide Installation Information, but only if you would otherwise\n   be required to provide such information under section 6 of the\n   GNU GPL, and only to the extent that such information is\n   necessary to install and execute a modified version of the\n   Combined Work produced by recombining or relinking the\n   Application with a modified version of the Linked Version. (If\n   you use option 4d0, the Installation Information must accompany\n   the Minimal Corresponding Source and Corresponding Application\n   Code. If you use option 4d1, you must provide the Installation\n   Information in the manner specified by section 6 of the GNU GPL\n   for conveying Corresponding Source.)\n\n  5. Combined Libraries.\n\n  You may place library facilities that are a work based on the\nLibrary side by side in a single library together with other library\nfacilities that are not Applications and are not covered by this\nLicense, and convey such a combined library under terms of your\nchoice, if you do both of the following:\n\n   a) Accompany the combined library with a copy of the same work based\n   on the Library, uncombined with any other library facilities,\n   conveyed under the terms of this License.\n\n   b) Give prominent notice with the combined library that part of it\n   is a work based on the Library, and explaining where to find the\n   accompanying uncombined form of the same work.\n\n  6. Revised Versions of the GNU Lesser General Public License.\n\n  The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\n  Each version is given a distinguishing version number. If the\nLibrary as you received it specifies that a certain numbered version\nof the GNU Lesser General Public License \"or any later version\"\napplies to it, you have the option of following the terms and\nconditions either of that published version or of any later version\npublished by the Free Software Foundation. If the Library as you\nreceived it does not specify a version number of the GNU Lesser\nGeneral Public License, you may choose any version of the GNU Lesser\nGeneral Public License ever published by the Free Software Foundation.\n\n  If the Library as you received it specifies that a proxy can decide\nwhether future versions of the GNU Lesser General Public License shall\napply, that proxy's public statement of acceptance of any version is\npermanent authorization for you to choose that version for the\nLibrary.\n</code></pre>"}]}